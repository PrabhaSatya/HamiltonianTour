#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include "DFS.h"
#include "stack.h"


void DFS_visit(struct adjvertex** adjlist,char *color,int* prevertexId,int i)
{	
	color[i]='G';
	int k=0;
	
	printf("\n%s",vertices[i]);
	int j;
	struct adjvertex* atemp;
	atemp=adjlist[i];
	while(atemp!=NULL)
	{	if(color[atemp->vertexId]=='W')
		{	prevertexId[atemp->vertexId]=i;
			DFS_visit(adjlist,color,prevertexId,atemp->vertexId);	
			
		}
		atemp=atemp->next;
	}
	color[i]='B';
	
	
}
void DFS(struct adjvertex **adjlist,char *color,int *prevertexId)
{	
	int i;
	printf("\n\nDFS Traversal of Type A\n");
	for(i=0;i<numVertices;i++)
	{color[i]='W';
	 prevertexId[i]=-1;
	}
	for(i=0;i<numVertices;i++)
		{
		if(adjlist[i]!=NULL)
		if(color[i]=='W')
			
			DFS_visit(adjlist,color,prevertexId,i);
		}
}



void DFS_B(struct edgeHashTable *edgeHash) {
	int count = 0;
	int i = 0, popped;
	struct Edge newEdge;
	int DFS_ID[numVertices];
	
	int visited[numVertices];
	for(i = 0; i < numVertices; i++) 
		DFS_ID[i] = visited[i] = 0;
		
	push(0);
	visited[0] = 1;
	while ((popped = pop()) != -1) {
		DFS_ID[count] = popped;
		count++;
		for( i = 0; i < numVertices; i++) {
			if((visited[i] == 1) || (i == popped))
				continue;
			newEdge.vertexId1 = popped;
			newEdge.vertexId2 = i;
			if(edgeHashSearch(edgeHash, &newEdge) == NULL) {
				visited[i] = 1;
				push(i);
			}	
				
					
		}	
	}
	
	printf("\nDFS traversal of Type B\n\n");
	for(i = 0;i <= count; i++) {
		printf("%s\n",vertices[DFS_ID[i]]);
	}

}
	
/*	//for(i = 0; i < numVertices; i++) {
		for(j = 1;j < numVertices-1; j++) {
			DFS_ID[0] = i;
			//v1 = i;
			//v2 = j;
			newEdge= (struct Edge *)malloc(sizeof(struct Edge));
			newEdge->vertexId1=i;
			newEdge->vertexId2=j;
			//newEdge->weight=0;
			
			
			temp=edgeHashSearch(edgeHash,newEdge);
			printf("IN first for loop\n");
			if(temp != NULL)
				continue;
			else
				//push(i);
				//p = pop();
				//count++;
				//DFS_ID[count] = p;
				//insert(DFS_ID,p,count-1);			
				push(j);	
		}	
		while(top != -1) {
			int k,flag = 0,q;
			p = pop();
			
			//if(!flag) {
				count++;
				DFS_ID[count] = p;
				i = p;
				for(j = 1;j < numVertices-1; j++) {
					if(j == p)
						continue;
				//DFS_ID[0] = i;
				//v1 = i;
				//v2 = j;
					//newEdge= (struct Edge *)malloc(sizeof(struct Edge));
					newEdge->vertexId1=i;
					newEdge->vertexId2=j;
					newEdge->weight = 0;
					printf("\nIN second for loop\n");
					printf("j = %d\n ",j);
					temp=edgeHashSearch(edgeHash,newEdge);
					printf("\nHi j = %d\n",j);
					if(temp != NULL)
						continue;
					else {
						q = checkduplicate(j);
						for(k = 0;k < count; k++) {
							if(DFS_ID[k] == p) {
								flag = 1;
								break;
							}	
						}
						if((q == 0) && (flag == 0))					
							push(j);	
					}	
			//}		
				}	
			
		}	
	//}*/
	//for(i = 0;i <= count; i++) {
	//	printf("\n%s \n",vertices[DFS_ID[i]]);
	//}

//}
