#include "main.h"
#define BUFLEN 200

extern int typeA;
extern int nexcludededges;
extern int numVertices;
int main(int argc, char *argv[])
 {
	if(argc != 2)
	 {
		printf("Usage:\n\t%s <input-file>\n", argv[0]);
		exit(1);
	}
	struct vertexHashTable *vertexHash = (struct vertexHashTable *)malloc(sizeof(struct vertexHashTable));
	struct edgeHashTable *edgeHash = (struct edgeHashTable *)malloc(sizeof(struct edgeHashTable));
	struct adjvertex  **adjlist;	
	vertexHashInit(vertexHash);
	edgeHashInit(edgeHash);
	parseInputDescription(argv[1], vertexHash, edgeHash);	
	if(edgeHash->edge_count != 0)
	 {
	    	int a = heapsort(edges, edgeHash->edge_count);
	    	int n;
	    
    	}
    	int c = checkTriangleInequality(edges, edgeHash);
    	if(c == 0)
		printf("\nTriangle inequality satisfied.\n");
	else
		printf("\nTriangle inequality not satisfied.\n");
		
	struct Edge *excludededges;	
    	struct spanningedge **minSpanningTreeEdges,*temp1;
		
    	if (NULL == (minSpanningTreeEdges=(struct spanningedge **)(malloc((numVertices)*sizeof(struct spanningedge*))))) {
        printf("\nmalloc cannot be done!");
	}
	int i, count, n = 1;
	int flag, flag1 = 0; 
	adjlist=(struct adjvertex **)(malloc((numVertices)*sizeof(struct adjvertex *)));
	excludededges=(struct Edge *)(malloc((numEdges)*sizeof(struct Edge)));
	flag=buildMinSpanningTree(edges,minSpanningTreeEdges,excludededges,adjlist);
	
	
	printf("\n...............spanning tree edges................\n");
	if(flag!=-1&&(numVertices==typeA))
	{	printf("Minimum Spanning Tree  constructed\n");		
		temp1=minSpanningTreeEdges[flag];
		while(temp1!=NULL)
		{
		
			printf("%s \t%s \t%d \n",vertices[temp1->edge.vertexId1],vertices[temp1->edge.vertexId2],temp1->edge.weight);
			temp1=temp1->next;
		}
		printf("cost of the spanning tree is %d\n",sweight);
		nexcludededges=numEdges-typeA+1;
		printf("number of excluded edges:%d\n",nexcludededges);
		if(nexcludededges!=0)	
		{	
			printf("excludededges are:\n");
			for(i=0;i<nexcludededges;i++)
			printf("%s \t%s \t%d \n",vertices[excludededges[i].vertexId1],vertices[excludededges[i].vertexId2],excludededges[i].weight);
		}
	
		
	}	
	else 
	{	

		printf("Minimum Spanning Tree not constructed\n");
		printf("connected components\n");
		for(i=0;i<typeA;i++)
		{	
			count=0;
			temp1=minSpanningTreeEdges[i];
			while(temp1!=NULL)
			{	
				if(count==0)
				{	printf("component %d\n",n++);
				}
		
				printf("%s \t%s \t%d \n",vertices[temp1->edge.vertexId1],vertices[temp1->edge.vertexId2],temp1->edge.weight);
				temp1=temp1->next;count++;
			}
		}
		
	}	
	printf("......................adjacency list...........................");
	struct adjvertex *atemp;
	for(i=0;i<numVertices;i++)
	{	
		atemp=adjlist[i];
		if(atemp!=NULL) printf("\n %s :",vertices[i]);
		while(atemp!=NULL)
		{	printf("\t %s",vertices[atemp->vertexId]);
			atemp=atemp->next;
		}		
	
	}
	int *prevertexId;
	char *color;
	//char **traversal;
	color=(char *)(malloc(numVertices*(sizeof(char))));
	prevertexId=(int *)(malloc(numVertices*(sizeof(int))));
	//traversal=(char **)(malloc(numVertices*(sizeof(char *))));
	DFS(adjlist,color,prevertexId);
	
	printf("\n\n");
	for(i=0;i<numVertices;i++)
	{if(prevertexId[i]!=-1)	
	printf("\npredecessor of %s is %s\t",vertices[i],vertices[prevertexId[i]]);		
	}	
	printf("\n\n");
	top = -1;
	stack = (int *)malloc(sizeof(numVertices));  
	DFS_B(edgeHash);
	return 0;

}


